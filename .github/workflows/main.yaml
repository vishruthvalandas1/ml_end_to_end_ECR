name: CI/CD to ECR and self-hosted

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: student-performance
  CONTAINER_PORT: 8080

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: false

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Lint code
        run: echo "Linting Repository"

      - name: Run unit tests
        run: echo "Running Unit Tests"

  build-and-push-ecr-image:
    name: Continuous Delivery (Build & Push)
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build -t "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" -t "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest" .
          docker push "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest"
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Continuous Deployment (self-hosted)
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Show disk & Docker usage (pre-clean)
        run: |
          df -h || true
          df -i || true
          docker system df -v || true

      # Aggressive cleanup to avoid ENOSPC
      - name: Free Docker space (pre-pull, aggressive)
        run: |
          set -euo pipefail

          # Stop/remove all containers
          docker ps -aq | xargs -r docker stop
          docker ps -aq | xargs -r docker rm

          # Remove ALL images (not just dangling)
          docker images -q | xargs -r docker rmi -f || true

          # Prune everything else
          docker system prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true

          # Optional: clear buildx cache dir
          rm -rf ~/.cache/buildx || true

          # If still < 5GB free, hard reset Docker state (DANGEROUS: wipes all Docker data)
          FREE_GB=$(df -Pk / | awk 'NR==2 {printf "%.0f\n", $4/1024/1024}')
          if [ "${FREE_GB:-0}" -lt 5 ]; then
            echo "Less than 5GB free, performing hard Docker reset..."
            sudo systemctl stop docker || true
            sudo rm -rf /var/lib/docker/* || true
            sudo systemctl start docker || true
          fi

      - name: Show disk after cleanup
        run: |
          df -h || true
          df -i || true
          docker system df -v || true

      - name: Pull the just-built image
        run: docker pull "${{ needs.build-and-push-ecr-image.outputs.image_uri }}"

      - name: Stop & remove previous container if running
        run: |
          if [ "$(docker ps -aq -f name=mltest)" ]; then
            docker stop mltest || true
            docker rm mltest || true
          fi

      - name: Run container
        env:
          IMAGE_URI: ${{ needs.build-and-push-ecr-image.outputs.image_uri }}
        run: |
          docker run -d \
            --name mltest \
            --restart unless-stopped \
            -p 8080:${{ env.CONTAINER_PORT }} \
            --ipc="host" \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            "$IMAGE_URI"

      - name: Prune dangling images (post-deploy)
        run: |
          docker image prune -f
          docker builder prune -af || true

      # Keep only the last 2 images for this repo (optional)
      - name: Keep last 2 images for repo (optional)
        run: |
          set -euo pipefail
          REPO="${{ env.ECR_REPOSITORY }}"
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          docker images --format '{{.Repository}} {{.ID}} {{.Tag}}' | \
            awk -v repo="$REGISTRY/$REPO" '$1==repo {print $2" "$3}' | \
            sort -k2,2 | head -n -2 | awk '{print $1}' | xargs -r docker rmi -f
